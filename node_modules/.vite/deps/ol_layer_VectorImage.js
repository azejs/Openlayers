import {
  ImageCanvas_default
} from "./chunk-HXED7SKM.js";
import {
  ENABLE_RASTER_REPROJECTION,
  IMAGE_SMOOTHING_DISABLED,
  IMAGE_SMOOTHING_ENABLED
} from "./chunk-LJGIG2JF.js";
import {
  BaseVector_default,
  VectorLayer_default
} from "./chunk-P5LXTL3W.js";
import {
  ViewHint_default
} from "./chunk-4J5GOOLB.js";
import {
  RBush
} from "./chunk-CA6AZ6OG.js";
import "./chunk-UFOHPVYI.js";
import "./chunk-CW6YYVMP.js";
import "./chunk-NDGDKZTS.js";
import {
  Layer_default2 as Layer_default
} from "./chunk-XY2KN2SM.js";
import "./chunk-LDGSA7TK.js";
import "./chunk-FFZPB4B2.js";
import "./chunk-UOO3MSTA.js";
import {
  ImageState_default
} from "./chunk-ZUHYO7BQ.js";
import "./chunk-JRGZR5VC.js";
import "./chunk-5LILDHYL.js";
import "./chunk-GJIS4L72.js";
import "./chunk-4GAUSOKV.js";
import {
  apply,
  compose,
  create,
  makeInverse,
  toString
} from "./chunk-PRCUNHCP.js";
import "./chunk-H2WCVIFF.js";
import {
  EventType_default
} from "./chunk-P3QNTLDD.js";
import {
  fromUserExtent
} from "./chunk-MIM6AGDZ.js";
import {
  containsCoordinate,
  containsExtent,
  getHeight,
  getIntersection,
  getWidth,
  intersects,
  isEmpty,
  scaleFromCenter
} from "./chunk-6X3ER73G.js";
import "./chunk-PNUDBW6R.js";
import {
  assign
} from "./chunk-6NJ7CFMT.js";

// node_modules/ol/renderer/canvas/ImageLayer.js
var __extends = function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var CanvasImageLayerRenderer = function(_super) {
  __extends(CanvasImageLayerRenderer2, _super);
  function CanvasImageLayerRenderer2(imageLayer) {
    var _this = _super.call(this, imageLayer) || this;
    _this.image_ = null;
    return _this;
  }
  CanvasImageLayerRenderer2.prototype.getImage = function() {
    return !this.image_ ? null : this.image_.getImage();
  };
  CanvasImageLayerRenderer2.prototype.prepareFrame = function(frameState) {
    var layerState = frameState.layerStatesArray[frameState.layerIndex];
    var pixelRatio = frameState.pixelRatio;
    var viewState = frameState.viewState;
    var viewResolution = viewState.resolution;
    var imageSource = this.getLayer().getSource();
    var hints = frameState.viewHints;
    var renderedExtent = frameState.extent;
    if (layerState.extent !== void 0) {
      renderedExtent = getIntersection(renderedExtent, fromUserExtent(layerState.extent, viewState.projection));
    }
    if (!hints[ViewHint_default.ANIMATING] && !hints[ViewHint_default.INTERACTING] && !isEmpty(renderedExtent)) {
      if (imageSource) {
        var projection = viewState.projection;
        if (!ENABLE_RASTER_REPROJECTION) {
          var sourceProjection = imageSource.getProjection();
          if (sourceProjection) {
            projection = sourceProjection;
          }
        }
        var image = imageSource.getImage(renderedExtent, viewResolution, pixelRatio, projection);
        if (image) {
          if (this.loadImage(image)) {
            this.image_ = image;
          } else if (image.getState() === ImageState_default.EMPTY) {
            this.image_ = null;
          }
        }
      } else {
        this.image_ = null;
      }
    }
    return !!this.image_;
  };
  CanvasImageLayerRenderer2.prototype.getData = function(pixel) {
    var frameState = this.frameState;
    if (!frameState) {
      return null;
    }
    var layer = this.getLayer();
    var coordinate = apply(frameState.pixelToCoordinateTransform, pixel.slice());
    var layerExtent = layer.getExtent();
    if (layerExtent) {
      if (!containsCoordinate(layerExtent, coordinate)) {
        return null;
      }
    }
    var imageExtent = this.image_.getExtent();
    var img = this.image_.getImage();
    var imageMapWidth = getWidth(imageExtent);
    var col = Math.floor(img.width * ((coordinate[0] - imageExtent[0]) / imageMapWidth));
    if (col < 0 || col >= img.width) {
      return null;
    }
    var imageMapHeight = getHeight(imageExtent);
    var row = Math.floor(img.height * ((imageExtent[3] - coordinate[1]) / imageMapHeight));
    if (row < 0 || row >= img.height) {
      return null;
    }
    return this.getImageData(img, col, row);
  };
  CanvasImageLayerRenderer2.prototype.renderFrame = function(frameState, target) {
    var image = this.image_;
    var imageExtent = image.getExtent();
    var imageResolution = image.getResolution();
    var imagePixelRatio = image.getPixelRatio();
    var layerState = frameState.layerStatesArray[frameState.layerIndex];
    var pixelRatio = frameState.pixelRatio;
    var viewState = frameState.viewState;
    var viewCenter = viewState.center;
    var viewResolution = viewState.resolution;
    var scale = pixelRatio * imageResolution / (viewResolution * imagePixelRatio);
    var extent = frameState.extent;
    var resolution = viewState.resolution;
    var rotation = viewState.rotation;
    var width = Math.round(getWidth(extent) / resolution * pixelRatio);
    var height = Math.round(getHeight(extent) / resolution * pixelRatio);
    compose(this.pixelTransform, frameState.size[0] / 2, frameState.size[1] / 2, 1 / pixelRatio, 1 / pixelRatio, rotation, -width / 2, -height / 2);
    makeInverse(this.inversePixelTransform, this.pixelTransform);
    var canvasTransform = toString(this.pixelTransform);
    this.useContainer(target, canvasTransform, this.getBackground(frameState));
    var context = this.context;
    var canvas = context.canvas;
    if (canvas.width != width || canvas.height != height) {
      canvas.width = width;
      canvas.height = height;
    } else if (!this.containerReused) {
      context.clearRect(0, 0, width, height);
    }
    var clipped = false;
    var render = true;
    if (layerState.extent) {
      var layerExtent = fromUserExtent(layerState.extent, viewState.projection);
      render = intersects(layerExtent, frameState.extent);
      clipped = render && !containsExtent(layerExtent, frameState.extent);
      if (clipped) {
        this.clipUnrotated(context, frameState, layerExtent);
      }
    }
    var img = image.getImage();
    var transform = compose(this.tempTransform, width / 2, height / 2, scale, scale, 0, imagePixelRatio * (imageExtent[0] - viewCenter[0]) / imageResolution, imagePixelRatio * (viewCenter[1] - imageExtent[3]) / imageResolution);
    this.renderedResolution = imageResolution * pixelRatio / imagePixelRatio;
    var dw = img.width * transform[0];
    var dh = img.height * transform[3];
    if (!this.getLayer().getSource().getInterpolate()) {
      assign(context, IMAGE_SMOOTHING_DISABLED);
    }
    this.preRender(context, frameState);
    if (render && dw >= 0.5 && dh >= 0.5) {
      var dx = transform[4];
      var dy = transform[5];
      var opacity = layerState.opacity;
      var previousAlpha = void 0;
      if (opacity !== 1) {
        previousAlpha = context.globalAlpha;
        context.globalAlpha = opacity;
      }
      context.drawImage(img, 0, 0, +img.width, +img.height, dx, dy, dw, dh);
      if (opacity !== 1) {
        context.globalAlpha = previousAlpha;
      }
    }
    this.postRender(context, frameState);
    if (clipped) {
      context.restore();
    }
    assign(context, IMAGE_SMOOTHING_ENABLED);
    if (canvasTransform !== canvas.style.transform) {
      canvas.style.transform = canvasTransform;
    }
    return this.container;
  };
  return CanvasImageLayerRenderer2;
}(Layer_default);
var ImageLayer_default = CanvasImageLayerRenderer;

// node_modules/ol/renderer/canvas/VectorImageLayer.js
var __extends2 = function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var CanvasVectorImageLayerRenderer = function(_super) {
  __extends2(CanvasVectorImageLayerRenderer2, _super);
  function CanvasVectorImageLayerRenderer2(layer) {
    var _this = _super.call(this, layer) || this;
    _this.vectorRenderer_ = new VectorLayer_default(layer);
    _this.layerImageRatio_ = layer.getImageRatio();
    _this.coordinateToVectorPixelTransform_ = create();
    _this.renderedPixelToCoordinateTransform_ = null;
    return _this;
  }
  CanvasVectorImageLayerRenderer2.prototype.disposeInternal = function() {
    this.vectorRenderer_.dispose();
    _super.prototype.disposeInternal.call(this);
  };
  CanvasVectorImageLayerRenderer2.prototype.getFeatures = function(pixel) {
    if (!this.vectorRenderer_) {
      return new Promise(function(resolve) {
        return resolve([]);
      });
    }
    var vectorPixel = apply(this.coordinateToVectorPixelTransform_, apply(this.renderedPixelToCoordinateTransform_, pixel.slice()));
    return this.vectorRenderer_.getFeatures(vectorPixel);
  };
  CanvasVectorImageLayerRenderer2.prototype.handleFontsChanged = function() {
    this.vectorRenderer_.handleFontsChanged();
  };
  CanvasVectorImageLayerRenderer2.prototype.prepareFrame = function(frameState) {
    var pixelRatio = frameState.pixelRatio;
    var viewState = frameState.viewState;
    var viewResolution = viewState.resolution;
    var hints = frameState.viewHints;
    var vectorRenderer = this.vectorRenderer_;
    var renderedExtent = frameState.extent;
    if (this.layerImageRatio_ !== 1) {
      renderedExtent = renderedExtent.slice(0);
      scaleFromCenter(renderedExtent, this.layerImageRatio_);
    }
    var width = getWidth(renderedExtent) / viewResolution;
    var height = getHeight(renderedExtent) / viewResolution;
    if (!hints[ViewHint_default.ANIMATING] && !hints[ViewHint_default.INTERACTING] && !isEmpty(renderedExtent)) {
      vectorRenderer.useContainer(null, null);
      var context = vectorRenderer.context;
      var layerState = frameState.layerStatesArray[frameState.layerIndex];
      context.globalAlpha = layerState.opacity;
      var imageLayerState = assign({}, layerState, { opacity: 1 });
      var imageFrameState_1 = assign({}, frameState, {
        declutterTree: new RBush(9),
        extent: renderedExtent,
        size: [width, height],
        viewState: assign({}, frameState.viewState, {
          rotation: 0
        }),
        layerStatesArray: [imageLayerState],
        layerIndex: 0
      });
      var emptyImage_1 = true;
      var image_1 = new ImageCanvas_default(renderedExtent, viewResolution, pixelRatio, context.canvas, function(callback) {
        if (vectorRenderer.prepareFrame(imageFrameState_1) && vectorRenderer.replayGroupChanged) {
          vectorRenderer.clipping = false;
          if (vectorRenderer.renderFrame(imageFrameState_1, null)) {
            vectorRenderer.renderDeclutter(imageFrameState_1);
            emptyImage_1 = false;
          }
          callback();
        }
      });
      image_1.addEventListener(EventType_default.CHANGE, function() {
        if (image_1.getState() !== ImageState_default.LOADED) {
          return;
        }
        this.image_ = emptyImage_1 ? null : image_1;
        var imageResolution = image_1.getResolution();
        var imagePixelRatio = image_1.getPixelRatio();
        var renderedResolution = imageResolution * pixelRatio / imagePixelRatio;
        this.renderedResolution = renderedResolution;
        this.coordinateToVectorPixelTransform_ = compose(this.coordinateToVectorPixelTransform_, width / 2, height / 2, 1 / renderedResolution, -1 / renderedResolution, 0, -viewState.center[0], -viewState.center[1]);
      }.bind(this));
      image_1.load();
    }
    if (this.image_) {
      this.renderedPixelToCoordinateTransform_ = frameState.pixelToCoordinateTransform.slice();
    }
    return !!this.image_;
  };
  CanvasVectorImageLayerRenderer2.prototype.preRender = function() {
  };
  CanvasVectorImageLayerRenderer2.prototype.postRender = function() {
  };
  CanvasVectorImageLayerRenderer2.prototype.renderDeclutter = function() {
  };
  CanvasVectorImageLayerRenderer2.prototype.forEachFeatureAtCoordinate = function(coordinate, frameState, hitTolerance, callback, matches) {
    if (this.vectorRenderer_) {
      return this.vectorRenderer_.forEachFeatureAtCoordinate(coordinate, frameState, hitTolerance, callback, matches);
    } else {
      return _super.prototype.forEachFeatureAtCoordinate.call(this, coordinate, frameState, hitTolerance, callback, matches);
    }
  };
  return CanvasVectorImageLayerRenderer2;
}(ImageLayer_default);
var VectorImageLayer_default = CanvasVectorImageLayerRenderer;

// node_modules/ol/layer/VectorImage.js
var __extends3 = function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var VectorImageLayer = function(_super) {
  __extends3(VectorImageLayer2, _super);
  function VectorImageLayer2(opt_options) {
    var _this = this;
    var options = opt_options ? opt_options : {};
    var baseOptions = assign({}, options);
    delete baseOptions.imageRatio;
    _this = _super.call(this, baseOptions) || this;
    _this.imageRatio_ = options.imageRatio !== void 0 ? options.imageRatio : 1;
    return _this;
  }
  VectorImageLayer2.prototype.getImageRatio = function() {
    return this.imageRatio_;
  };
  VectorImageLayer2.prototype.createRenderer = function() {
    return new VectorImageLayer_default(this);
  };
  return VectorImageLayer2;
}(BaseVector_default);
var VectorImage_default = VectorImageLayer;

// dep:ol_layer_VectorImage
var ol_layer_VectorImage_default = VectorImage_default;
export {
  ol_layer_VectorImage_default as default
};
//# sourceMappingURL=ol_layer_VectorImage.js.map
