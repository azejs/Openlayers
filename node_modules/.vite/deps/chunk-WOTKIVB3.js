import {
  deflateCoordinate
} from "./chunk-J5NS7KLT.js";
import {
  SimpleGeometry_default,
  rotate,
  translate
} from "./chunk-4GAUSOKV.js";
import {
  createOrUpdate,
  forEachCorner,
  intersects
} from "./chunk-6X3ER73G.js";

// node_modules/ol/geom/Circle.js
var __extends = function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var Circle = function(_super) {
  __extends(Circle2, _super);
  function Circle2(center, opt_radius, opt_layout) {
    var _this = _super.call(this) || this;
    if (opt_layout !== void 0 && opt_radius === void 0) {
      _this.setFlatCoordinates(opt_layout, center);
    } else {
      var radius = opt_radius ? opt_radius : 0;
      _this.setCenterAndRadius(center, radius, opt_layout);
    }
    return _this;
  }
  Circle2.prototype.clone = function() {
    var circle = new Circle2(this.flatCoordinates.slice(), void 0, this.layout);
    circle.applyProperties(this);
    return circle;
  };
  Circle2.prototype.closestPointXY = function(x, y, closestPoint, minSquaredDistance) {
    var flatCoordinates = this.flatCoordinates;
    var dx = x - flatCoordinates[0];
    var dy = y - flatCoordinates[1];
    var squaredDistance = dx * dx + dy * dy;
    if (squaredDistance < minSquaredDistance) {
      if (squaredDistance === 0) {
        for (var i = 0; i < this.stride; ++i) {
          closestPoint[i] = flatCoordinates[i];
        }
      } else {
        var delta = this.getRadius() / Math.sqrt(squaredDistance);
        closestPoint[0] = flatCoordinates[0] + delta * dx;
        closestPoint[1] = flatCoordinates[1] + delta * dy;
        for (var i = 2; i < this.stride; ++i) {
          closestPoint[i] = flatCoordinates[i];
        }
      }
      closestPoint.length = this.stride;
      return squaredDistance;
    } else {
      return minSquaredDistance;
    }
  };
  Circle2.prototype.containsXY = function(x, y) {
    var flatCoordinates = this.flatCoordinates;
    var dx = x - flatCoordinates[0];
    var dy = y - flatCoordinates[1];
    return dx * dx + dy * dy <= this.getRadiusSquared_();
  };
  Circle2.prototype.getCenter = function() {
    return this.flatCoordinates.slice(0, this.stride);
  };
  Circle2.prototype.computeExtent = function(extent) {
    var flatCoordinates = this.flatCoordinates;
    var radius = flatCoordinates[this.stride] - flatCoordinates[0];
    return createOrUpdate(flatCoordinates[0] - radius, flatCoordinates[1] - radius, flatCoordinates[0] + radius, flatCoordinates[1] + radius, extent);
  };
  Circle2.prototype.getRadius = function() {
    return Math.sqrt(this.getRadiusSquared_());
  };
  Circle2.prototype.getRadiusSquared_ = function() {
    var dx = this.flatCoordinates[this.stride] - this.flatCoordinates[0];
    var dy = this.flatCoordinates[this.stride + 1] - this.flatCoordinates[1];
    return dx * dx + dy * dy;
  };
  Circle2.prototype.getType = function() {
    return "Circle";
  };
  Circle2.prototype.intersectsExtent = function(extent) {
    var circleExtent = this.getExtent();
    if (intersects(extent, circleExtent)) {
      var center = this.getCenter();
      if (extent[0] <= center[0] && extent[2] >= center[0]) {
        return true;
      }
      if (extent[1] <= center[1] && extent[3] >= center[1]) {
        return true;
      }
      return forEachCorner(extent, this.intersectsCoordinate.bind(this));
    }
    return false;
  };
  Circle2.prototype.setCenter = function(center) {
    var stride = this.stride;
    var radius = this.flatCoordinates[stride] - this.flatCoordinates[0];
    var flatCoordinates = center.slice();
    flatCoordinates[stride] = flatCoordinates[0] + radius;
    for (var i = 1; i < stride; ++i) {
      flatCoordinates[stride + i] = center[i];
    }
    this.setFlatCoordinates(this.layout, flatCoordinates);
    this.changed();
  };
  Circle2.prototype.setCenterAndRadius = function(center, radius, opt_layout) {
    this.setLayout(opt_layout, center, 0);
    if (!this.flatCoordinates) {
      this.flatCoordinates = [];
    }
    var flatCoordinates = this.flatCoordinates;
    var offset = deflateCoordinate(flatCoordinates, 0, center, this.stride);
    flatCoordinates[offset++] = flatCoordinates[0] + radius;
    for (var i = 1, ii = this.stride; i < ii; ++i) {
      flatCoordinates[offset++] = flatCoordinates[i];
    }
    flatCoordinates.length = offset;
    this.changed();
  };
  Circle2.prototype.getCoordinates = function() {
    return null;
  };
  Circle2.prototype.setCoordinates = function(coordinates, opt_layout) {
  };
  Circle2.prototype.setRadius = function(radius) {
    this.flatCoordinates[this.stride] = this.flatCoordinates[0] + radius;
    this.changed();
  };
  Circle2.prototype.rotate = function(angle, anchor) {
    var center = this.getCenter();
    var stride = this.getStride();
    this.setCenter(rotate(center, 0, center.length, stride, angle, anchor, center));
    this.changed();
  };
  Circle2.prototype.translate = function(deltaX, deltaY) {
    var center = this.getCenter();
    var stride = this.getStride();
    this.setCenter(translate(center, 0, center.length, stride, deltaX, deltaY, center));
    this.changed();
  };
  return Circle2;
}(SimpleGeometry_default);
Circle.prototype.transform;
var Circle_default = Circle;

export {
  Circle_default
};
//# sourceMappingURL=chunk-WOTKIVB3.js.map
